/*
Given a binary tree, find the leftmost value in the last row of the tree.

Example 1:
Input:

    2
   / \
  1   3

Output:
1
Example 2: 
Input:

        1
       / \
      2   3
     /   / \
    4   5   6
       /
      7

Output:
7
Note: You may assume the tree (i.e., the given root node) is not NULL.
*/
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public int maxLevel = 0;
    public int result = 0;
    public int findBottomLeftValue(TreeNode root) {
        findResult(root, 1);
        return result;
    }
    
    private void findResult(TreeNode pNode, int level) {
        if (pNode == null) {
            return;
        }
        if (level > maxLevel) {
            result = pNode.val;
            maxLevel = level;
        }
        findResult(pNode.left, level + 1);
        findResult(pNode.right, level + 1);
    }
}
